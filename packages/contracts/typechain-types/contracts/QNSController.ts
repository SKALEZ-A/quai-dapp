/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace QNSController {
  export type PendingStruct = {
    owner: AddressLike;
    secret: BytesLike;
    expiresAt: BigNumberish;
  };

  export type PendingStructOutput = [
    owner: string,
    secret: string,
    expiresAt: bigint
  ] & { owner: string; secret: string; expiresAt: bigint };
}

export interface QNSControllerInterface extends Interface {
  getFunction(
    nameOrSignature: "commit" | "computeCommitHash" | "getPending" | "reveal"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Commit" | "Reveal"): EventFragment;

  encodeFunctionData(
    functionFragment: "commit",
    values: [BytesLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeCommitHash",
    values: [BytesLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPending",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [BytesLike, AddressLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeCommitHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPending", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
}

export namespace CommitEvent {
  export type InputTuple = [
    commitHash: BytesLike,
    node: BytesLike,
    owner: AddressLike,
    secret: BytesLike,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    commitHash: string,
    node: string,
    owner: string,
    secret: string,
    expiresAt: bigint
  ];
  export interface OutputObject {
    commitHash: string;
    node: string;
    owner: string;
    secret: string;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevealEvent {
  export type InputTuple = [
    commitHash: BytesLike,
    node: BytesLike,
    owner: AddressLike
  ];
  export type OutputTuple = [commitHash: string, node: string, owner: string];
  export interface OutputObject {
    commitHash: string;
    node: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QNSController extends BaseContract {
  connect(runner?: ContractRunner | null): QNSController;
  waitForDeployment(): Promise<this>;

  interface: QNSControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  commit: TypedContractMethod<
    [
      node: BytesLike,
      owner: AddressLike,
      secret: BytesLike,
      expiresAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  computeCommitHash: TypedContractMethod<
    [
      node: BytesLike,
      owner: AddressLike,
      secret: BytesLike,
      expiresAt: BigNumberish
    ],
    [string],
    "view"
  >;

  getPending: TypedContractMethod<
    [commitHash: BytesLike],
    [QNSController.PendingStructOutput],
    "view"
  >;

  reveal: TypedContractMethod<
    [
      node: BytesLike,
      owner: AddressLike,
      secret: BytesLike,
      expiresAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "commit"
  ): TypedContractMethod<
    [
      node: BytesLike,
      owner: AddressLike,
      secret: BytesLike,
      expiresAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "computeCommitHash"
  ): TypedContractMethod<
    [
      node: BytesLike,
      owner: AddressLike,
      secret: BytesLike,
      expiresAt: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPending"
  ): TypedContractMethod<
    [commitHash: BytesLike],
    [QNSController.PendingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "reveal"
  ): TypedContractMethod<
    [
      node: BytesLike,
      owner: AddressLike,
      secret: BytesLike,
      expiresAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Commit"
  ): TypedContractEvent<
    CommitEvent.InputTuple,
    CommitEvent.OutputTuple,
    CommitEvent.OutputObject
  >;
  getEvent(
    key: "Reveal"
  ): TypedContractEvent<
    RevealEvent.InputTuple,
    RevealEvent.OutputTuple,
    RevealEvent.OutputObject
  >;

  filters: {
    "Commit(bytes32,bytes32,address,bytes32,uint64)": TypedContractEvent<
      CommitEvent.InputTuple,
      CommitEvent.OutputTuple,
      CommitEvent.OutputObject
    >;
    Commit: TypedContractEvent<
      CommitEvent.InputTuple,
      CommitEvent.OutputTuple,
      CommitEvent.OutputObject
    >;

    "Reveal(bytes32,bytes32,address)": TypedContractEvent<
      RevealEvent.InputTuple,
      RevealEvent.OutputTuple,
      RevealEvent.OutputObject
    >;
    Reveal: TypedContractEvent<
      RevealEvent.InputTuple,
      RevealEvent.OutputTuple,
      RevealEvent.OutputObject
    >;
  };
}
